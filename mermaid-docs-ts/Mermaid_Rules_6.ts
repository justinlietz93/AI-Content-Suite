// AUTOGENERATED FILE FROM MARKDOWN. DO NOT EDIT.
export const MERMAID_RULES_6 = `
## 6. Diagram-Specific Syntax and Behavior

This section details the precise syntax and operational rules for each supported Mermaid diagram type.

### 6.1 Architecture Diagrams (v11.1.0+)
*   **Declaration:** \`architecture-beta\`.
*   **Elements:** \`groups\`, \`services\`, \`edges\`, and \`junctions\` can be declared in any order. Identifiers *must* be declared prior to use.
*   **Icons:** Declare icons for supporting components by enclosing the icon name in \`()\`.
*   **Labels:** Declare labels for supporting components by enclosing text in \`[]\`.
*   **Syntax Reference:**
    *   Group: \`group {group id}({icon name})[{title}] (in {parent id})?\`
    *   Service: \`service {service id}({icon name})[{title}] (in {parent id})?\`
    *   Edge: \`{serviceId}{{group}}?:{T|B|L|R} {<}?--{>}? {T|B|L|R}:{serviceId}{{group}}?\`
    *   Junction: \`junction {junction id} (in {parent id})?\`
*   **Edge Rules:** Edge direction uses a colon (\`:\`) followed by \`L|R|T|B\` on the service side. Arrows are added by \`_\` (left) or \`>\` (right) before/after the direction. \`groupIds\` are not permitted for direct edge specification. The \`{group}\` modifier is exclusive to services within a group.

### 6.2 Block Diagrams
*   **Declaration:** \`block\`.
*   **Layout:** Columns are defined by \`columns N\`. Block width (column span) is \`label:N\`. Composite (nested) blocks use \`block ... end\`. Horizontal block arrangement requires \`space\` keywords. Vertical arrangement: \`columns 1\`. Space blocks: \`space\` (default 1 column) or \`space:num\`.
*   **Shapes:** Specific shapes are achieved by delimiters around text (e.g., \`id("Text")\` for round, \`id[["Text"]]\` for subroutine, \`id(("Text"))\` for circle).
*   **Arrows & Links:** Block arrows: \`blockArrowId<["Label"]>(direction)\`. Directions: \`right\`, \`left\`, \`up\`, \`down\`, \`x\`, \`y\`, \`(x, down)\`. Basic links: \`A-->B\` (arrow) or \`A---B\` (line). Text on links: \`A-- "X" -->B\`.

### 6.3 C4 Diagrams (Experimental)
*   **Declaration:** \`C4Context\`, \`C4Container\`, \`C4Component\`, \`C4Dynamic\`, or \`C4Deployment\`.
*   **Layout:** Not fully automated; shape positions are influenced by statement order. Layout statements \`Lay_U\`, \`Lay_Up\`, \`Lay_D\`, \`Lay_Down\`, \`Lay_L\`, \`Lay_Left\`, \`Lay_R\`, \`Lay_Right\` are not supported.
*   **Unsupported Features (Short-term):** \`sprite\`, \`tags\`, \`link\`, \`Legend\`.
*   \`RelIndex\` ignores its index parameter; sequence is determined by \`rel\` statement order.
*   Parameter assignment for styles can be non-named (order-based) or named (prefix with \`$\`, e.g., \`$offsetX\`).

### 6.4 Class Diagrams
*   **Declaration:** \`classDiagram\`.
*   **Naming:** Class names: alphanumeric (including unicode), underscores, dashes (\`-\`). Labels can be in \`["Label"]\` or \`\` \`Label\` \`\`. Generic types are not part of the class name for referencing. Duplicate class names with different generic types are unsupported.
*   **Members:** Defined using a colon \`:\` (single) or curly braces \`{}\` (multiple). Method return types require a space between \`)\` and the type.
*   **Generics:** Enclosed in \`~\`. Nested generics are supported. Generics containing commas (e.g., \`List<K, V>\`) are unsupported.
*   **Visibility & Classifiers:**
    *   Visibility: \`+\` (Public), \`-\` (Private), \`#\` (Protected), \`~\` (Package/Internal) precede the member name.
    *   Method Classifiers: \`*\` (Abstract), \`$\` (Static) appended after \`()\` or return type.
    *   Field Classifiers: \`$\` (Static) appended at the end of the field definition.
*   **Relationships:** \`[classA][Arrow][ClassB]\`. Arrow types: \`<\\|--\`, \`*--\`, \`o--\`, \`-->\`, \`--\`, \`..< \`, \`..\\|>\`, \`..\`. Arrowheads can be reversed. Labels on relations: \`[classA][Arrow][ClassB]:LabelText\`. Two-way relations: \`[Relation Type][Link][Relation Type]\`. Cardinality: quoted text \`"1"\` or \`"*" \` before/after an arrow.
*   **Interfaces & Namespaces:** Lollipop interfaces: \`bar ()-- foo\`. Each interface must be unique. Namespaces: \`namespace Name { ... }\`.
*   **Annotations:** \`<<Interface>>\`, \`<<Abstract>>\`, \`<<Service>>\`, \`<<Enumeration>>\` defined within \`<<\` and \`>>\`. Inline style \`class Name <<Annotation>>\` is recommended.
*   **Notes:** General \`note "text"\` or class-specific \`note for ClassName "text"\`.
*   **Configuration:** \`hideEmptyMembersBox\` is configurable.

### 6.5 Entity Relationship Diagrams
*   **Declaration:** \`erDiagram\`.
*   **Entity Naming:** Singular nouns. Unicode and spaces (in double quotes) allowed. Aliases: \`name[Alias]\`.
*   **Relationships:** \`<first-entity> [<relationship> <second-entity> : <relationship-label>]\`. All parts mandatory if specified beyond \`<first-entity>\`. \`relationship-label\` describes relation from first entity's perspective. Unicode/Markdown supported.
    *   Cardinality: \`\\|o\`, \`o\\|\` (Zero or one); \`\\|\\|\`, \`\\|\\|\` (Exactly one); \`}o\`, \`o{\` (Zero or more); \`}\\|\`, \`\\|{\` (One or more).
    *   Identifying: \`--\` (solid). Non-identifying: \`..\` (dashed).
*   **Attributes:** Defined in a block \`{ type name }\`. \`type\` must begin with an alphabetic char, \`name\` can start with \`*\` for primary key. No implicit valid data types.
*   **Attribute Keys & Comments:** \`PK\` (Primary Key), \`FK\` (Foreign Key), \`UK\` (Unique Key). Multiple keys: \`PK, FK\`. No Markdown/Unicode for keys. Comments: \`""\` at end of definition; cannot contain \`"\` character.
*   **Configuration:** ELK layout: \`config: layout: elk\` in frontmatter.

### 6.6 Flowchart Diagrams
*   **Declaration:** \`flowchart\` or \`graph\`.
*   **Node Naming Constraints:** "end" (lowercase) as a node name will break; capitalize or enclose. "o" or "x" as first letter of connecting node: add space or capitalize. "Nodes inside nodes" require quotes.
*   **Nodes:** ID (default text) or \`id1[Text in the box]\`. Markdown text: \`markdown["\`This **is** _Markdown_\`"]\`.
*   **Node Shapes:** Delimiters define shapes (e.g., \`id1(Text)\` for round, \`id1[[Text]]\` for subroutine, \`id1((Text))\` for circle, \`id1>Text]\` for asymmetric). General syntax: \`A@{ shape: <shapeName> }\`. Asymmetric \`id1>Text]\` lacks mirror support.
*   **Special Shapes (Icons/Images):**
    *   Icon: \`A@{ icon: "<iconName>", form: "<shape>", label: "Text", pos: "<position>", h: <height> }\`. Defaults: \`label\` not displayed, \`pos\` to \`b\`, \`h\` to \`48\`. Minimum \`h\`: \`48\`. FontAwesome icons: \`fa:<icon class name>\`.
    *   Image: \`A@{ img: "<url>", label: "Text", pos: "<position>", w: <width>, h: <height>, constraint: "<on|off>" }\`. Defaults: \`label\` not displayed, \`pos\` to \`b\`, \`w\`/\`h\` to natural size, \`constraint\` to \`off\`. \`constraint: on\` maintains aspect ratio.
*   **Links/Edges:** Solid/dotted lines (\`-\`, \`--\`), with/without arrowheads (\`>\`, \`>>\`), crosses (\`x\`), circles (\`o\`), invisible (\`~~~\`). Text: \`A -- Text --> B\` or \`A -->|Text|B\`. Multi-directional: \`A o--o B\`.
*   **Link Chaining:** \`A -- text --> B -- text2 --> C\`. Multiple node links: \`a --> b & c--> d\`. Parallel links: \`A & B --> C & D\`.
*   **Edge IDs & Animation:** Assign ID: \`A <edgeId>@--> B\`. Animate: \`<edgeId>@{ animate: true }\`. Speed: \`<edgeId>@{ animation: <speed> }\` (\`fast\`, \`slow\`). Escape commas in \`stroke-dasharray\` as \`\\,\`.
*   **Minimum Link Length:** Extra dashes (\`-\`), equals (\`=\`), or dots (\`.\`). Extra characters on right for links with labels.
*   **Subgraphs:** \`subgraph <title> \\n ... \\n end\`. Explicit ID: \`subgraph <id> [<title>] \\n ... \\n end\`. \`direction\` statement within \`flowchart\` subgraphs. Subgraph direction ignored if linked externally; inherits parent.
*   **Graph Declarations:** Optional semicolon. Single space between vertices/link: \`A --- B\`. No space between vertex/text: \`A[Text]\`. No space between link/text: \`A--Text-->B\`.
*   **Configuration:** \`config: flowchart: markdownAutoWrap: false\`. ELK renderer: \`config: flowchart: defaultRenderer: "elk"\`. Diagram-level curve style: \`config: flowchart: curve: <curveStyle>\`. Values: \`basis\`, \`bumpX\`, \`bumpY\`, \`cardinal\`, \`catmullRom\`, \`linear\`, \`monotoneX\`, \`monotoneY\`, \`natural\`, \`step\`, \`stepAfter\`, \`stepBefore\`. Edge-level curve styles override diagram-level. Last modification applies.

### 6.7 Gantt Diagram
*   **Declaration:** \`gantt\`.
*   **Title:** \`title <text>\` (optional).
*   **Date Formatting:** \`dateFormat <format>\` (default \`YYYY-MM-DD\`). \`axisFormat <format>\` (default \`YYYY-MM-DD\`). Refer to \`day.js\` and \`d3-time-format\` docs.
*   **Excludes & Weekends:** \`excludes <dates>\` (e.g., \`YYYY-MM-DD\`, "sunday", "weekends"). "weekdays" unsupported. \`weekend <day>\` (v11.0.0+) for custom weekend start (\`friday\`, \`saturday\`). Default weekend: Sat/Sun.
*   **Sections:** \`section <name>\`. Required name. Tasks follow current section.
*   **Tasks:** \`title:metadata\`. Metadata: comma-separated. Tags (\`active\`, \`done\`, \`crit\`, \`milestone\`) must be first. \`until\` keyword for end dates (v10.9.0+). Sequential by default; start date defaults to preceding task's end.
*   **Milestones:** \`milestone\` keyword in metadata. Position: \`initial date + duration / 2\`.
*   **Vertical Markers:** \`vert\` keyword in metadata. Extend across chart, positioned by date, do not take a row.
*   **Axis Ticks (v10.3.0+):** \`tickInterval <interval>\`. Pattern: \`^([1-9][0-9]*)(millisecond|second|minute|hour|day|week|month)$\`. \`millisecond\`/\`second\` require v10.3.0+. \`weekday <day>\` for week-based \`tickInterval\` (default Sunday).
*   **Task Duration:** Tasks are continuous bars. Excluded dates extend duration to the right, no gaps within task. Excluded dates between tasks are skipped graphically.
*   **Today Marker:** \`todayMarker <styleList>\` or \`todayMarker off\`.
*   **Configuration:** Compact mode: \`displayMode: compact\` in frontmatter. Margins: \`mermaid.ganttConfig\` or CLI JSON.

### 6.8 GitGraph Diagrams
*   **Declaration:** \`gitGraph\`.
*   **Initialization:** Default \`main\` branch (current). Commits have unique, random IDs by default.
*   **Commits:** \`commit\`. Default type \`NORMAL\`. Custom ID: \`id: "<your_custom_id>"\`. Type: \`type: <NORMAL|REVERSE|HIGHLIGHT>\`. Tag: \`tag: "<your_custom_tag>"\`. Attributes can be mixed.
*   **Branches:** Create/switch: \`branch <branchName>\`. Name must be unique. Switch: \`checkout <branchName>\` (\`switch\` interchangeable). Non-existent branch checkout is console error. Merge: \`merge <branchName>\`. Only separate branches can merge. Results in merge commit (filled double circle). Cherry-pick: \`cherry-pick id:"<commitId>"\` (v10.8.0+). \`id\` required, commit must not be on current branch. Current branch needs at least one commit. Cherry-picking merge commit requires \`parent:"<commitId>"\`. Invalid parent throws error. Parent must be immediate.
*   **Merge Decoration:** Decorate merge commits using \`id\`, \`tag\`, \`type\` (e.g., \`merge develop id: "customID" tag: "customTag" type: REVERSE\`).
*   **Branch Order:** \`order: <positiveNumber>\`. \`main\` branch default \`0\`. Branches without \`order\` appear by appearance. Define \`order\` for all branches for full control.
*   **Keywords as Branch Names:** Quote if ambiguous (e.g., \`"cherry-pick"\`).
*   **Orientation (v10.3.0+):** \`gitGraph LR:\` (Left-to-Right, default), \`gitGraph TB:\` (Top-to-Bottom), \`gitGraph BT:\` (Bottom-to-Top, v11.0.0+).
*   **Configuration:** \`showBranches\`: \`boolean\` (default \`true\`). \`showCommitLabel\`: \`boolean\` (default \`true\`). \`rotateCommitLabel\`: \`boolean\` (default \`true\`). \`mainBranchName\`: \`string\` (default \`main\`). \`mainBranchOrder\`: \`integer\` (default \`0\`). \`parallelCommits\`: \`boolean\` (default \`false\`).

### 6.9 Kanban Diagram
*   **Declaration:** \`kanban\`.
*   **Columns:** \`columnId[Column Title]\`. Represent workflow stages.
*   **Tasks:** Listed under columns with indentation (crucial). \`taskId[Task Description]\`. Each column/task needs unique ID. Metadata: \`@{'key': 'value', ...}\`. Keys: \`assigned\`, \`ticket\`, \`priority\`. \`priority\` values: \`'Very High'\`, \`'High'\`, \`'Low'\`, \`'Very Low'\`.
*   **Configuration:** Ticket base URL: \`config: kanban: ticketBaseUrl: 'URL'\` in frontmatter. \`#TICKET#\` is replaced by task ticket value.

### 6.10 Mindmap Diagrams
*   **Declaration:** \`mindmap\`.
*   **Hierarchy:** Defined by indentation (spaces/tabs). Indentation relative to nearest parent.
*   **Node Shapes:** Square: \`id[Text]\`. Rounded square: \`id(Text)\`. Circle: \`id((Text))\`. Bang: \`id))Text((\`. Cloud: \`id)Text(\`. Hexagon: \`id{{Text}}\`. Default: \`Text\` (no delimiters).
*   **Icons:** \`::icon(<iconClasses>)\` (e.g., \`::icon(fa fa-book)\`).
*   **Configuration:** Tidy Tree layout: \`config: layout: tidy-tree\` in frontmatter.

### 6.11 Packet Diagram (v11.0.0+)
*   **Declaration:** \`packet\`.
*   **Fields:** Multi-bit blocks: \`start-end: "Block name"\`. Single-bit blocks: \`start: "Block name"\`. Bit count fields: \`+<count>: "Block name"\` (v11.7.0+, starts from end of previous field). Each line is a field. Descriptions in quotes.

### 6.12 Pie Chart Diagrams
*   **Declaration:** \`pie\`.
*   **Title:** \`title <titleValue>\` (optional string).
*   **Data Set:** Pie slices: \`"<label>" : <numericValue>\`. Ordered clockwise. Numeric values up to two decimal places. Must be positive, greater than zero. Negative values cause error.
*   **Display Options:** \`showData\` renders data values with legend text.
*   **Configuration:** Axial position of labels (\`textPosition\`) from \`0.0\` (center) to \`1.0\` (outside). Default \`0.75\`.

### 6.13 Quadrant Chart
*   **Declaration:** \`quadrantChart\`.
*   **Title:** \`title <text>\` (always at top).
*   **Axes:** X-axis: \`x-axis <leftText> --> <rightText>\` or \`x-axis <leftText>\`. Y-axis: \`y-axis <bottomText> --> <topText>\` or \`y-axis <bottomText>\`. If no points, axis/quadrant text center in quadrants. If points, x-axis labels are left of quadrant/bottom of chart; y-axis labels are bottom of quadrant.
*   **Quadrant Text:** \`quadrant-[1|2|3|4] <text>\`. If points, text renders at top of quadrant.
*   **Points:** \`<pointLabel>: [<xValue>, <yValue>]\`. X/Y values \`0\` to \`1\`.
*   **Point Styling:** Direct styles (e.g., \`radius: 12, color: #ff3300\`) or class styles (e.g., \`Point A:::class1: [0.9, 0.0]\`). Direct > Class > Theme.

### 6.14 Radar Diagram (v11.6.0+)
*   **Declaration:** \`radar-beta\`.
*   **Title:** \`title <text>\` (optional).
*   **Axes:** \`axis <id>["<label>"][, <id>["<label>"]...]\`. Multiple axes per line.
*   **Curves:** \`curve <id>["<label>"]{<value1>, <value2>, ...}\` (list) or \`curve <id>["<label>"]{<axisId1>: <value1>, ...}\` (key-value pairs). Multiple curves per line. List assumes axis order.
*   **Options:** \`showLegend <true|false>\` (default \`true\`). \`max <value>\` (calculated if not provided). \`min <value>\` (default \`0\`). \`graticule <circle|polygon>\` (default \`circle\`). \`ticks <number>\` (default \`5\`).

### 6.15 Requirement Diagram
*   **Declaration:** \`requirementDiagram\`.
*   **Input:** User input (names, text) can be quoted.
*   **Requirement Definition:** \`<type> <user_defined_name> { id: <user_defined_id> text: <user_defined_text> risk: <risk> verifymethod: <method> }\`.
    *   Types: \`requirement\`, \`functionalRequirement\`, \`interfaceRequirement\`, \`performanceRequirement\`, \`physicalRequirement\`, \`designConstraint\`.
    *   Risk: \`Low\`, \`Medium\`, \`High\`.
    *   Verification: \`Analysis\`, \`Inspection\`, \`Test\`, \`Demonstration\`.
*   **Element Definition:** \`element <user_defined_name> { type: <user_defined_type> docref: <user_defined_ref> }\`.
*   **Relationship:** \`{source} - <type> -> {destination}\` or \`{destination} <- <type> - {source}\`.
    *   Types: \`contains\`, \`copies\`, \`derives\`, \`satisfies\`, \`verifies\`, \`refines\`, \`traces\`.
    *   Source/destination names must refer to existing requirement/element nodes.

### 6.16 Sankey Diagram (v10.3.0+)
*   **Declaration:** \`sankey\`.
*   **CSV Data:** Exactly 3 columns: \`source\`, \`target\`, \`value\`. Empty lines allowed. Comma in field: wrap in quotes. Double quote in quoted string: \`""\`.
*   **Configuration:** \`linkColor\`: \`source\`, \`target\`, \`gradient\`, or hex code. \`nodeAlignment\`: \`justify\`, \`center\`, \`left\`, \`right\`.

### 6.17 Sequence Diagrams
*   **Declaration:** \`sequenceDiagram\`.
*   **Node Naming Constraints:** "end" (lowercase) as node name is problematic; enclose or capitalize.
*   **Participants:** Implicit or \`participant <name>\`. Actor symbol: \`actor <name>\`. Specific symbols: \`participant <name> @{ "type" : "<symbolType>" }\` (\`boundary\`, \`control\`, \`entity\`, \`database\`, \`collections\`, \`queue\`). Aliases: \`participant <alias> as <label>\`. Line breaks in actor names use \`aliases\` with \`<br/>\`.
*   **Actor Creation/Destruction (v10.3.0+):** \`create participant <name>\` or \`create actor <alias> as <label>\`. Only message recipient can be created. \`destroy <name>\`. Sender or recipient can be destroyed.
*   **Grouping (Boxes):** \`box <colorOrDescription> <actor1> & <actor2> ... end\`. Transparent box: \`box transparent <colorName>\`.
*   **Messages:** \`[Actor][Arrow][Actor]:Message text\`.
    *   Arrows: \`->\` (solid, no arrow), \`-->\` (dotted, no arrow), \`->>\` (solid, arrowhead), \`-->>\` (dotted, arrowhead), \`<<->>\` (solid bidirectional, v11.0.0+), \`<<-->>\` (dotted bidirectional, v11.0.0+), \`-x\` (solid, cross), \`--x\` (dotted, cross), \`-) \` (solid, open async), \`--) \` (dotted, open async).
*   **Activations:** \`activate <actor>\`, \`deactivate <actor>\`. Shorthand: \`->>+<actor>\` (activate recipient), \`-->>-<actor>\` (deactivate sender).
*   **Notes:** \`Note right of <actor>: <text>\`. Spanning: \`Note over <actor1>,<actor2>: <text>\`.
*   **Combined Fragments:**
    *   Loop: \`loop <text> \\n ... \\n end\`.
    *   Alternative: \`alt <desc> \\n ... \\n else \\n ... \\n end\`. Optional: \`opt <desc> \\n ... \\n end\`.
    *   Parallel: \`par [Action 1] \\n ... \\n and [Action 2] \\n ... \\n end\`.
    *   Critical: \`critical [Action] \\n ... \\n option [Circumstance A] \\n ... \\n end\`.
    *   Break: \`break [reason] \\n ... \\n end\`.
*   **Background Highlighting:** \`rect <COLOR> \\n ...content... \\n end\`. Colors use \`rgb()\` or \`rgba()\`.
*   **Sequence Numbers:** \`autonumber\` keyword or \`mermaid.initialize({ sequence: { showSequenceNumbers: true } })\`.
*   **Configuration:** Margins: \`mermaid.sequenceConfig\` or CLI JSON. For actor/participant creation/deletion bug fixes, update to v10.7.0+.

### 6.18 State Diagrams
*   **Declaration:** \`stateDiagram-v2\` (recommended) or \`stateDiagram\`.
*   **States:** ID: \`stateId\`. Description and alias: \`state "Description" as s2\`. Description with colon: \`s2 : Description\`. Spaces in name: define with ID, then reference (e.g., \`yswsii: Your state with spaces in it\`).
*   **Transitions:** \`s1 --> s2\`. Text: \`s1 --> s2: A transition\`. Undefined states are implicitly defined.
*   **Start/End States:** \`[*]\`. Transition direction defines type.
*   **Composite States:** \`state <id> { \\n ...internal... \\n }\`. Name on separate line: \`CompositeName: Description\`. Transitions not permitted between internal states of different composite states.
*   **Special States:** Choice: \`state <id> <<choice>>\`. Fork: \`state <id> <<fork>>\`. Join: \`state <id> <<join>>\`.
*   **Notes:** Multiline: \`note <position> of <stateId> \\n <text> \\n end note\`. Single-line: \`note <position> of <stateId> : <text>\`. Position: \`right\` or \`left\`.
*   **Concurrency:** \`--\` within composite state.

### 6.19 Timeline Diagram
*   **Declaration:** \`timeline\`.
*   **Title:** \`title <titleText>\` (optional).
*   **Events:** \`timePeriod : eventText\`. Multiple events on one line: \`timePeriod : eventText1 : eventText2\`. Multiple events on separate lines: \`timePeriod : eventText1 \\n : eventText2\`. Time period and event text are not limited to numbers. Sequence matters: left-to-right for time periods, top-to-bottom for events within a period.
*   **Sections/Grouping:** \`section <sectionName>\`. All subsequent time periods in this section. Default section if none defined. Follows color scheme.
*   **Text Wrapping:** \`<br>\` forces line break. Automatic wrapping occurs if text is too long.
*   **Styling:** If no section, time periods are styled individually. \`disableMulticolor: true\` for single color scheme.

### 6.20 Treemap Diagram
*   **Declaration:** \`treemap-beta\`.
*   **Nodes:** Section/parent nodes: \`"Section Name"\`. Leaf nodes with values: \`"Leaf Name": <value>\`.
*   **Hierarchy:** Indentation (spaces/tabs).
*   **Value Display:** \`showValues\` defaults to \`true\`.
*   **Configuration:** Diagram padding: \`diagramPadding\`. Value format: \`valueFormat\` (uses D3 format specifiers, e.g., \`,\`, \`$\`, \`.1f\`).
*   **Limitations:** Best suited for hierarchical data. Very small values may be difficult to visualize. Deep hierarchies can be unclear. Not suitable for negative values.

### 6.21 User Journey Diagram
*   **Declaration:** \`journey\`.
*   **Title:** \`title <titleText>\` (optional).
*   **Sections:** \`section <sectionName>\`.
*   **Tasks:** \`Task name: <score>: <comma separated list of actors>\`.

### 6.22 XY Chart
*   **Declaration:** \`xychart\`.
*   **Orientation:** \`xychart horizontal\` or \`xychart vertical\` (default).
*   **Title:** \`title "<titleText>"\`.
*   **Text Values:** Multiple words (especially with spaces) *must* be in double quotes. Single words can omit quotes.
*   **Axes:** Numeric x-axis: \`x-axis <title> <min> --> <max>\`. Categorical x-axis: \`x-axis "<title>" [<category1>, "<category2>", ...]\`. Numeric y-axis: \`y-axis "<title>" <min> --> <max>\`. Y-axis title only: \`y-axis "<title>"\`. Axes are optional; range auto-generated if omitted.
*   **Data Series:** Line series: \`line [<value1>, <value2>, ...]\`. Bar series: \`bar [<value1>, <value2>, ...]\`. Values are numeric.
*   **Minimum Requirements:** Chart name (\`xychart\`) and at least one data set (\`line\` or \`bar\`).
*   **Configuration:** Show data values in bars: \`showDataLabel: true\` (default \`false\`).

### 6.23 ZenUML Diagrams
*   **Declaration:** \`zenuml\`.
*   **Participants:** Implicit or explicit \`<name>\`. Symbols: \`@Actor Alice\`, \`@Database Bob\`. Aliases: \`A as Alice\`.
*   **Messages:**
    *   Sync: \`A.SyncMessage\`. With parameters/nesting: \`A.SyncMessage(with, parameters) { \\n B.nestedSyncMessage() \\n }\`.
    *   Async: \`Alice->Bob: How are you?\`.
    *   Creation: \`new A1\` or \`new A2(with, parameters)\`.
    *   Reply: Variable assignment from sync: \`a = A.SyncMessage()\`. Typed variable: \`SomeType a = A.SyncMessage()\`. \`return\` keyword within method. \`@return\` or \`@reply\` annotator for async.
*   **Nesting:** Sync messages and creation messages nested using \`{}\`.
*   **Combined Fragments:**
    *   Loops: \`while(<condition>) { ... }\`. Keywords: \`for\`, \`forEach\`, \`foreach\`, \`loop\`.
    *   Alternatives: \`if(<condition1>) { ... } else if(<condition2>) { ... } else { ... }\`.
    *   Optional: \`opt { ... }\`.
    *   Parallel: \`par { \\n statement1 \\n statement2 \\n }\`.
    *   Try/Catch/Finally (Break): \`try { ... } catch { ... } finally { ... }\`.
`;
